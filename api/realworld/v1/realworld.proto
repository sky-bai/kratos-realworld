syntax = "proto3";

package helloworld.v1;

import "google/api/annotations.proto";

option go_package = "kratos-realworld/api/realworld/v1;v1";

service RealWorld {
  rpc Login(LoginRequest) returns (UserReply) {
    option (google.api.http) = {
      // post 需要body
      post: "/api/users/login"
      body: "*"
    };
  }

  rpc Register(RegisterRequest) returns (UserReply) {
    option (google.api.http) = {
      post: "/api/users"
      body: "*"
    };
  }

  rpc GetCurrentUser(GetCurrentUserRequest) returns (UserReply) {
    option (google.api.http) = {
      get: "/api/user"
      // 如果是get的话 body一定要去掉
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UserReply) {
    option (google.api.http) = {
      put: "/api/user"
      body: "*"
    };
  }

  rpc GetProfile(GetProfileRequest) returns (ProfileReply) {
    option (google.api.http) = {
      get: "/api/profiles/{username}"
      // 如果是get的话 body一定要去掉
    };
  }

  rpc FollowUser(FollowUserRequest) returns (ProfileReply) {
    option (google.api.http) = {
      post: "/api/profiles/{username}/follow"
      body: "*"
    };
  }

  rpc UnFollowUser(UnFollowUserRequest) returns (ProfileReply) {
    option (google.api.http) = {
      delete: "/api/profiles/{username}/follow"
    };
  }

  // 多个query参数的查询

  rpc ListArticles(ListArticlesRequest) returns (MultipleArticlesReply) {
    option (google.api.http) = {
      get: "/api/articles"
    };
  }

  rpc FeedArticles(FeedArticlesRequest) returns (MultipleArticlesReply) {
    option (google.api.http) = {
      get: "/api/articles/feed"
    };
  }


  // 文章的crud
  rpc GetArticle(GetArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      get: "/api/articles/{slug}"
    };
  }

  rpc CreateArticle(CreateArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      post: "/api/articles"
      body: "*"
    };
  }

  rpc UpdateArticle(UpdateArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      put: "/api/articles/{slug}"
      body: "*"
    };
  }

  rpc DeleteArticle(DeleteArticleRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}"
    };
  }

  // 评论的crud
  rpc AddComment(AddCommentRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/comments"
      body: "*"
    };
  }

  rpc GetComments(GetCommentsRequest) returns (MultipleCommentsReply) {
    option (google.api.http) = {
      get: "/api/articles/{slug}/comments"
    };
  }

  rpc DeleteComment(DeleteCommentRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/comments/{id}"
    };
  }

  // 点赞
  rpc FavoriteArticle(FavoriteArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/favorite"
      body: "*"
    };
  }

  rpc UnFavoriteArticle(UnFavoriteArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/favorite"
    };
  }

  rpc GetTags(GetTagsRequest) returns (TagListReply) {
    option (google.api.http) = {
      get: "/api/tags"
    };
  }

  // demo
  // Sends a greeting
  //  rpc SayHello (HelloRequest) returns (HelloReply)  {
  //    option (google.api.http) = {
  //      // 定义一个 GET 接口，并且把 name 映射到 HelloRequest
  //      // 这一行定义了一个 HTTP GET 接口，将 gRPC 方法映射到路径 /helloworld/{name}，其中 {name} 是路径参数。
  //      get: "/helloworld/{name}",
  //      // 可以添加附加接口
  //      additional_bindings {
  //        // 定义一个 POST 接口，并且把 body 映射到 HelloRequest
  //        post: "/v1/greeter/say_hello",
  //        body: "*",
  //        // 这一行指定了 HTTP POST 请求的主体内容，"*" 表示请求的主体可以是任何内容。
  //        // 在这种情况下，HTTP POST 请求的主体将被映射到 HelloRequest 消息类型。
  //      }
  //      // 那么岂不是可以定义多个接口，然后映射到同一个方法？
  //      // 可以定义多个不同的 HTTP 接口，然后将它们映射到同一个 gRPC 方法。
  //      // 这在实际开发中是很有用的，因为不同的客户端可能使用不同的 HTTP 方法或路径来访问同一个功能。
  //    };
  //  }
}

message GetCommentsRequest {
  string slug = 1;
}

message GetTagsRequest {}

message UnFavoriteArticleRequest {
  string slug = 1;
}


message FavoriteArticleRequest {
  string slug = 1;
}

message DeleteCommentRequest {
  string slug = 1;
  int64 id = 2;
}


message AddCommentRequest {
  message Comment {
    string body = 1;
  }
  Comment comment = 1;
  string slug = 2;
}

message Empty {}

message DeleteArticleRequest {
  string slug = 1;
}

message UpdateArticleRequest {
  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tagList = 4;
  }

  Article article = 1;
  string slug = 2;
}

message CreateArticleRequest {
  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tagList = 4;
  }
  Article article = 1;
}

message GetArticleRequest {
  string slug = 1;
}


message FeedArticlesRequest {
  int64 limit = 1;
  int64 offset = 2;
}

message ListArticlesRequest {
  string tag = 1;
  string author = 2;
  string favorited = 3;
  int64 limit = 4;
  int64 offset = 5;
}

message UnFollowUserRequest {
  string username = 1;
}

message FollowUserRequest {
  string username = 1;
}

message GetProfileRequest{
  string username = 1;
}

message UpdateUserRequest{
  message User {
    string email = 1;
    string token = 2;
    string username = 3;
    string bio = 4;
    string image = 5;
  }

  User user = 1;
}

message GetCurrentUserRequest {}

message UserReply {
  message User{
    string email = 1;
    string token = 2;
    string username = 3;
    string bio = 4;
    string image = 5;
  }
  User user = 1;
}

message ProfileReply {
  message Profile {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }
  Profile profile = 1;
}


message SingleArticleReply {
  message Author{
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }
  message  Article {
    string slug = 1;
    string title = 2;
    string description = 3;
    string body = 4;
    repeated string tagList = 5;
    string createdAt = 6;
    string updatedAt = 7;
    bool favorited = 8;
    uint32 favoritesCount = 9;
    Author author = 10;
  }
  Article article = 1;
}

message MultipleArticlesReply{

  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Articles {
    string slug = 1;
    string title = 2;
    string description = 3;
    string body = 4;
    repeated string tagList = 5;
    string createdAt = 6;
    string updatedAt = 7;
    bool favorited = 8;
    uint32 favoritesCount = 9;
    Author author = 10;
  }

  repeated Articles articles = 1;
  uint32 articlesCount = 2;
}

message SingleCommentReply {

  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Comment {
    uint32 id = 1;
    string createdAt = 2;
    string updatedAt = 3;
    string body = 4;
    Author author = 5;
  }

  Comment comment = 1;
}

message MultipleCommentsReply {

  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Comments {
    uint32 id = 1;
    string createdAt = 2;
    string updatedAt = 3;
    string body = 4;
    Author author = 5;
  }

  repeated Comments comments = 1;
}

message TagListReply {
  repeated string tags = 1;
}

message LoginRequest {
  message  User {
    string email = 1;
    string password = 2;
  }
  User user = 1;
}

message RegisterRequest {
  message  User {
    string username = 1;
    string email = 2;
    string password = 3;
  }
  User user = 1;
}

message LoginReply {}

message RegisterReply {}




// The greeting service definition.
//service RealWorld {
//  // Sends a greeting
//  rpc SayHello (HelloRequest) returns (HelloReply) {
//    option (google.api.http) = {
//      get: "/realworld/{name}"
//    };
//  }
//}

// 这段 `.proto` 文件定义了一个 gRPC 服务和其中的一个 RPC 方法。让我来解释每个部分的含义：
//
//1. `service RealWorld { ... }`：这部分定义了一个 gRPC 服务，服务的名称是 `RealWorld`。一个 gRPC 服务可以包含多个 RPC 方法（Remote Procedure Call，远程过程调用）。
//
//2. `rpc SayHello (HelloRequest) returns (HelloReply) { ... }`：这部分定义了一个名为 `SayHello` 的 RPC 方法，
// 该方法接收一个 `HelloRequest` 类型的参数，并返回一个 `HelloReply` 类型的响应。在 gRPC 中，方法的请求和响应消息是通过消息类型来定义的。
//
//3. `option (google.api.http) = { ... }`：这部分使用 gRPC 的标准选项之一，即 `google.api.http`，
// 它指定了将 gRPC 方法映射到 HTTP API 的细节。在这个例子中，该选项将 `SayHello` 方法映射到了 HTTP 的 GET 请求，
// 并定义了请求路径为 `"/realworld/{name}"`。这表示通过访问 `/realworld/{name}` 路径，可以调用 `SayHello` 方法，其中 `{name}` 是一个路径参数。
//
// 综合起来，这个 `.proto` 文件定义了一个名为 `RealWorld` 的 gRPC 服务，其中包含一个名为 `SayHello` 的 RPC 方法，
// 该方法接收一个 `HelloRequest` 请求消息，并返回一个 `HelloReply` 响应消息。
// 此外，它还指定了将 `SayHello` 方法映射到 HTTP API 的细节，使得可以通过 HTTP GET 请求访问该方法。


